#######################################
##### LUNCH ORDER #####################
#######################################

#### LUNCH REQUEST templates
(@lunch-req-verb :amr-set want)
(@lunch-req-verb :amr-set help)

(@lunch-sub :amr-set (order :* * :ARG1 lunch))

#I want to order lunch
#Please help me order lunch
#### DISABLED because it matches its negative too:
#### "I don't want to order lunch"
#(@lunch-req-sub :amr-set (@lunch-req-verb
#   :* *
#   :ARG1 @lunch-sub))

# What's for lunch?
(@lunch-req-sub :amr-set (a / amr-unknown
    :purpose lunch))

# Order lunch
(@lunch-req-sub :amr-set (order    :* *    :ARG1 lunch  :pos "VBP"))
(@lunch-req-sub :amr-set (order    :* *    :ARG1 lunch  :pos "VB"))

# I want to order lunch, Grace
# Grace, I want to order lunch
(@lunch-req-say :amr-set (say
   :* *
   :ARG1 @lunch-req-sub))

(@lunch-req :amr-set @lunch-req-say)
(@lunch-req :amr-set @lunch-req-sub)

########## Generate ##########


# Do you want to start with a salad?
(@lunch-salad?-g :amr-set
   (want-01
      :polarity (a / amr-unknown)
      :ARG0 (you :pos "PRP")
      :ARG1 (start-01
               :ARG0 you
               :ARG2 (salad :pos "NN")
               :pos "VB")
      :pos "VB"))

# Okay, salad ordered.
(@lunch-salad-confirm-g :amr-set
   (order-02
      :ARG1 salad
      :ARG1-of (okay-04 :pos "UH")
      :pos "VBN"))

# Okay, no $dish ordered.      
(@lunch-no-dish-confirm-g :amr-set (order-02   :polarity - :ARG1 $dish :ARG1-of okay-04))

# We have $soup soup today.
(@lunch-soup?-g :amr-set
   (have-03
      :ARG0 (we :pos "PRP")
      :ARG1 (soup :mod $soup)
      :time (today :pos "NN")
      :pos "VBP"))

# Okay, $soup soup selected.
(@lunch-soup-confirm-g :amr-set
   (select-01
      :ARG1 (soup :mod (l / lentil :pos "NNP") :pos "NN")
      :ARG1-of (okay-04 :pos "UH")
      :pos "VBN"))

# For the main dish, you can choose between $dish1 and $dish2.
(@lunch-main-dish?-g :amr-set
   (possible-01
      :ARG1 (choose-01
               :ARG0 (you :pos "PRP")
               :ARG1 (between :op1 $dish1 :op2 $dish2 :pos "IN")
               :pos "VB")
      :topic (dish :mod (main :pos "JJ") :pos "NN")))

# Okay, you'll get the $dish today.
(@lunch-main-dish-confirm-g :amr-set
   (get-01
      :ARG0 (you :pos "PRP")
      :ARG1 $dish
      :time (today :pos "NN")
      :ARG1-of (okay-04 :pos "UH")
      :pos "VB"))

# Unfortunately no.
(@lunch-option-not-available-g :amr-set (fortunate-01 :polarity - :ARG2 no))
# Unfortunately we do not have such options
(@lunch-option-not-have-g  :amr-set (fortunate-01 :polarity - :ARG2
           (have-03 :polarity - :ARG0 we :ARG1 (option :mod such))))



# All set!
(@lunch-all-set-g :amr-set
   (set-08
      :mode (expressive / -)
      :ARG1 (all :pos "DT")
      :pos "VBN"))

# Lunch will be served at $time.
(@lunch-serve-time-g :amr-set
   (serve-02
      :ARG1 (lunch :pos "NN")
      :time (date-entity :time $time)
      :pos "VBN"))

# I hope you have a delicious meal.
(@lunch-ending-g :amr-set
   (hope-01
      :ARG0 (i :pos "PRP")
      :ARG1 (have-03
                :ARG0 (you :pos "PRP")
                :ARG1 (meal :mod (delicious :pos "JJ") :pos "NN")
                :pos "VBP")
      :pos "VBP"))
