(domain BLOCKS) 
(type object) 
(predicate ontable) 
(arity ontable 1) 
(var ontable 1 object) 
(predicate holding) 
(arity holding 1) 
(var holding 1 object) 
(predicate handempty) 
(arity handempty 0) 
(predicate on) 
(arity on 2) 
(var on 1 object) 
(var on 2 object) 
(predicate clear) 
(arity clear 1) 
(var clear 1 object) 
(action pick-up) 
(types pick-up (object)) 
(= (pre (pick-up $x)) (superpose ((clear $x) (ontable $x) (handempty )))) 
(= (eff-pos (pick-up $x)) (superpose ((holding $x)))) 
(= (eff-neg (pick-up $x)) (superpose ((ontable $x) (clear $x) (handempty )))) 
(action unstack) 
(types unstack (object object)) 
(= (pre (unstack $x $y)) (superpose ((on $x $y) (clear $x) (handempty )))) 
(= (eff-pos (unstack $x $y)) (superpose ((holding $x) (clear $y)))) 
(= (eff-neg (unstack $x $y)) (superpose ((clear $x) (handempty ) (on $x $y)))) 
(action put-down) 
(types put-down (object)) 
(= (pre (put-down $x)) (superpose ((holding $x)))) 
(= (eff-pos (put-down $x)) (superpose ((clear $x) (handempty ) (ontable $x)))) 
(= (eff-neg (put-down $x)) (superpose ((holding $x)))) 
(action stack) 
(types stack (object object)) 
(= (pre (stack $x $y)) (superpose ((holding $x) (clear $y)))) 
(= (eff-pos (stack $x $y)) (superpose ((clear $x) (handempty ) (on $x $y)))) 
(= (eff-neg (stack $x $y)) (superpose ((holding $x) (clear $y)))) 

(problem BLOCKS-4-0) 
(object A)
(isa A object)
(object B)
(isa B object)
(object C)
(isa C object)
(object D)
(isa D object)
(init state 0) 
(= (valuation (state 0)) (superpose ((ontable A) (ontable B) (clear D) (clear C) (handempty ) (ontable D) (clear A) (ontable C) (clear B))))(goal (and (on D C) (on C B) (on B A)))  
