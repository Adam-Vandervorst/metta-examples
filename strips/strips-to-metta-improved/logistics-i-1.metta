(domain logistics) 
(type object) 
(type truck) 
(isa truck vehicle)
(type airplane) 
(isa airplane vehicle)
(type package) 
(isa package physobj)
(type vehicle) 
(isa vehicle physobj)
(type airport) 
(isa airport place)
(type location) 
(isa location place)
(type city) 
(isa city object)
(type place) 
(isa place object)
(type physobj) 
(isa physobj object)
(predicate in) 
(arity in 2) 
(var in 1 package) 
(var in 2 vehicle) 
(predicate in-city) 
(arity in-city 2) 
(var in-city 1 place) 
(var in-city 2 city) 
(predicate at) 
(arity at 2) 
(var at 1 physobj) 
(var at 2 place) 
(action LOAD-AIRPLANE) 
(= (pre (LOAD-AIRPLANE $pkg $airplane $loc)) (superpose ((at $pkg $loc) (at $airplane $loc)))) 
(= (eff-pos (LOAD-AIRPLANE $pkg $airplane $loc)) (superpose ((in $pkg $airplane)))) 
(= (eff-neg (LOAD-AIRPLANE $pkg $airplane $loc)) (superpose ((at $pkg $loc)))) 
(action UNLOAD-AIRPLANE) 
(= (pre (UNLOAD-AIRPLANE $pkg $airplane $loc)) (superpose ((in $pkg $airplane) (at $airplane $loc)))) 
(= (eff-pos (UNLOAD-AIRPLANE $pkg $airplane $loc)) (superpose ((at $pkg $loc)))) 
(= (eff-neg (UNLOAD-AIRPLANE $pkg $airplane $loc)) (superpose ((in $pkg $airplane)))) 
(action UNLOAD-TRUCK) 
(= (pre (UNLOAD-TRUCK $pkg $truck $loc)) (superpose ((at $truck $loc) (in $pkg $truck)))) 
(= (eff-pos (UNLOAD-TRUCK $pkg $truck $loc)) (superpose ((at $pkg $loc)))) 
(= (eff-neg (UNLOAD-TRUCK $pkg $truck $loc)) (superpose ((in $pkg $truck)))) 
(action LOAD-TRUCK) 
(= (pre (LOAD-TRUCK $pkg $truck $loc)) (superpose ((at $truck $loc) (at $pkg $loc)))) 
(= (eff-pos (LOAD-TRUCK $pkg $truck $loc)) (superpose ((in $pkg $truck)))) 
(= (eff-neg (LOAD-TRUCK $pkg $truck $loc)) (superpose ((at $pkg $loc)))) 
(action DRIVE-TRUCK) 
(= (pre (DRIVE-TRUCK $truck $loc-from $loc-to $city)) (superpose ((at $truck $loc-from) (in-city $loc-from $city) (in-city $loc-to $city)))) 
(= (eff-pos (DRIVE-TRUCK $truck $loc-from $loc-to $city)) (superpose ((at $truck $loc-to)))) 
(= (eff-neg (DRIVE-TRUCK $truck $loc-from $loc-to $city)) (superpose ((at $truck $loc-from)))) 
(action FLY-AIRPLANE) 
(= (pre (FLY-AIRPLANE $airplane $loc-from $loc-to)) (superpose ((at $airplane $loc-from)))) 
(= (eff-pos (FLY-AIRPLANE $airplane $loc-from $loc-to)) (superpose ((at $airplane $loc-to)))) 
(= (eff-neg (FLY-AIRPLANE $airplane $loc-from $loc-to)) (superpose ((at $airplane $loc-from)))) 

(problem logistics-4-0) 
(object apn1)
(isa apn1 airplane)
(object cit1)
(isa cit1 city)
(object tru2)
(isa tru2 truck)
(object obj11)
(isa obj11 package)
(object pos1)
(isa pos1 location)
(object obj22)
(isa obj22 package)
(object obj23)
(isa obj23 package)
(object obj21)
(isa obj21 package)
(object cit2)
(isa cit2 city)
(object obj13)
(isa obj13 package)
(object obj12)
(isa obj12 package)
(object pos2)
(isa pos2 location)
(object apt1)
(isa apt1 airport)
(object apt2)
(isa apt2 airport)
(object tru1)
(isa tru1 truck)
(init state 0) 
(= (valuation (state 0)) (superpose ((at obj13 pos1) (in-city apt1 cit1) (at tru2 pos2) (at obj12 pos1) (at obj11 pos1) (in-city pos2 cit2) (at obj23 pos2) (at tru1 pos1) (in-city apt2 cit2) (in-city pos1 cit1) (at obj22 pos2) (at apn1 apt2) (at obj21 pos2))))
(goal (and (at obj11 apt1) (at obj23 pos1) (at obj13 apt1) (at obj21 pos1)))
